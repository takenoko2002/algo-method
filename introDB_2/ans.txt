
5-1
select * from students where age >= 18;

5-2
select
floor(avg(score)) AS '平均点',
max(score) AS '最高点'
from grades;

5-3
select * from prefectures where name like '_%山%';

5-4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SUBSTR(name, -1)でnameの末尾を取得し、GROUP BY でまとめる
-----------------------------------------------------------------------------------------------------------------------------------------------------------
select SUBSTR(name, -1) AS '分類',count(*) AS '総数' from prefectures group by SUBSTR(name, -1);

5-5
select choice AS '選択肢',count(*) AS '得票数' from votes group by choice order by count(*) DESC,choice ASC;

5-6

WITH
    population_tokyo
AS (
    -- ここに適切なクエリを記述してください
    SELECT population FROM prefectures WHERE name = '東京都'
)

select prefectures.* from prefectures,population_tokyo where prefectures.population > (population_tokyo.population /2 )
order by population DESC;

5-5
SELECT 
ROW_NUMBER() OVER(ORDER BY score DESC, id ASC) '順位',
name AS '名前',
score AS 'スコア'
FROM results DESC LIMIT 20 OFFSET 40 ;

5-6
UPDATE grades SET score = 25 WHERE problem_id = 1;
SELECT name AS '名前', sum(score) AS '合計点' FROM grades GROUP BY name;

5-7
-----------------------------------------------------------------------------------------------------------------------------------------------------------
副問合せの中に副問合せを書いても可
SELECT
    *
FROM
    posts
WHERE
    author = (
        SELECT author FROM posts WHERE faves = (
            SELECT MAX(faves) FROM posts
        )
    )
ORDER BY
    DATE(date) DESC
LIMIT 5;
-----------------------------------------------------------------------------------------------------------------------------------------------------------

WITH
    fav_author
AS (
    -- ここに適切なクエリを記述してください
    SELECT author,max(faves) FROM posts
)

select posts.* from posts,fav_author where fav_author.author = posts.author
order by date DESC LIMIT 5 OFFSET 0;


6-1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え 4

6-2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え 2 ,1 ,1

6-3
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え 3 ,1

6-4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
外部キーは、所属を表す
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　3

6-5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　3,2

6-6
-----------------------------------------------------------------------------------------------------------------------------------------------------------
外部キーと1対多
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　2

6-7
-----------------------------------------------------------------------------------------------------------------------------------------------------------
多対多
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　NO , YES , YES

6-8
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　2

6-9
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　4

6-10
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　3

6-11
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　5,4

6-12
-----------------------------------------------------------------------------------------------------------------------------------------------------------
一般に、行持ちの方が良い設計とされる。
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　行持ち、行持ち、行持ち

6-13
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　2,9

6-14
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
答え　2

7-1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
内部結合
SELECT カラム名 FROM xxx INNER JOIN yyy ON xxx.aaa = yyy.bbb;
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT prefectures.name AS '都道府県名',
regions.id AS '地方ID',
regions.name AS '地方名'
FROM prefectures INNER JOIN regions ON prefectures.region_id = regions.id;


7-2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT students.name AS '氏名',
faculties.name AS '所属学部'
FROM students INNER JOIN faculties ON students.faculty_id = faculties.id;

7-3
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT students.name AS '氏名',
faculties.name AS '所属学部'
FROM faculties LEFT OUTER JOIN students ON students.faculty_id = faculties.id;

7-4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
「NULL ならば別の値に書き換える」という処理は IFNULL 関数を用いると実現できます。
IFNULL(x, y) で、「カラム x が NULL でなければその値、NULL ならば y」を表します。
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT ifnull(students.name, '該当なし') AS '氏名',
faculties.name AS '所属学部'
FROM faculties LEFT OUTER JOIN students ON students.faculty_id = faculties.id;

7-5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
select prefectures.name AS '都道府県名'
from prefectures INNER JOIN cities ON prefectures.id = cities.prefecture_id
WHERE  cities.name = '府中市';

7-6
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT  faculties.id AS '学部ID' , faculties.name AS '学部名' , COUNT(*) AS '学生数' 
FROM faculties INNER JOIN students ON faculties.id = students.faculty_id
GROUP BY students.faculty_id
ORDER BY `学部ID` ASC;

7-7
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT  prefectures.name AS '都道府県名' , cities.name AS '市町村名' , wards.name AS '区名' 
FROM prefectures
INNER JOIN cities ON prefectures.id = cities.prefecture_id
INNER JOIN wards ON cities.id = wards.city_id;

7-8
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT  students.name AS '氏名' , subjects.name AS '科目名' , grades.score AS '点数' 
FROM grades
INNER JOIN students ON grades.student_id = students.id
INNER JOIN subjects ON grades.subject_id = subjects.id;

7-9
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT  subjects.name AS '科目名',
count(students.enrollment_year = 2023 OR NULL) AS '1年生履修者数',
count(students.enrollment_year = 2022 OR NULL) AS '2年生履修者数'
FROM registrations
INNER JOIN students  ON registrations.student_id = students.id
INNER JOIN subjects  ON registrations.subject_id = subjects.id
group by subjects.name;

8-1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE prefectures(id, name, area,population);
INSERT INTO prefectures VALUES (1, '北海道', 83423, 5225000);
INSERT INTO prefectures VALUES (2, '青森県', 9645, 1238000);
INSERT INTO prefectures VALUES (3, '岩手県', 15275, 1211000);

SELECT * FROM prefectures;

8-2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE prefectures (id INTEGER, name TEXT,area INTEGER,population INTEGER);
-- データの追加と表示
INSERT INTO
    prefectures
VALUES
    (1, '北海道', 83423, 5225000),
    (2, '青森県', 9645, 1238000),
    (3, '岩手県', 15275, 1211000);
SELECT * FROM prefectures;

8-3
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE prefectures(id INTEGER NOT NULL, name TEXT,area INTEGER,population INTEGER);
-- データの追加
INSERT INTO
    prefectures
VALUES
    (1, '北海道', 83423, 5225000),
    (2, '青森県', 9645, 1238000),
    (3, '岩手県', 15275, 1211000);

-- 次のクエリを実行するとエラーが出ることを確認してみましょう
-- (提出時にはコメントアウトしてください)
-- INSERT INTO prefectures VALUES (NULL, '宮城県', 7282, 2302000);

-- データの表示
SELECT * FROM prefectures;

8-4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE users (id TEXT NOT NULL PRIMARY KEY, name TEXT UNIQUE ,email TEXT UNIQUE ,age INTEGER);
-- データの追加
INSERT INTO
    users
VALUES
    ('00001', 'arara234', 'arara.qa@algo-method.com', 38),
    ('00002', 'ir1ri_kame', 'iriri.yi@algo-method.com', 14),
    ('00003', 'oruru', 'oruru.td@algo-method.com', 25);

-- 次のクエリを実行するとそれぞれエラーが出ることを確認してみましょう
-- (提出時にはコメントアウトしてください)
-- INSERT INTO users VALUES (NULL, 'oruru_', 'oruru.pq@algo-method.com', 16);
-- INSERT INTO users VALUES ('00001', 'oruru_', 'oruru.pq@algo-method.com', 16);
-- INSERT INTO users VALUES ('00004', 'oruru', 'oruru.pq@algo-method.com', 16);
-- INSERT INTO users VALUES ('00004', 'oruru_', 'oruru.td@algo-method.com', 16);

-- データの表示
SELECT * FROM users;

8-5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- 外部キーの参照整合性制約を有効にする
PRAGMA foreign_keys = ON;

-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE regions (id INTEGER NOT NULL PRIMARY KEY,name TEXT);
CREATE TABLE prefectures (id INTEGER NOT NULL PRIMARY KEY,name TEXT,region_id INTEGER, FOREIGN KEY (region_id) REFERENCES regions(id));

-- データの追加
INSERT INTO regions     VALUES (1, '北海道'), (2, '東北'), (3, '関東');
INSERT INTO prefectures VALUES (1, '北海道', 1), (2, '青森県', 2), (3, '岩手県', 2);

-- 次のクエリを実行するとエラーが出ることを確認してみましょう
-- (提出時にはコメントアウトしてください)
-- DELETE FROM regions WHERE id = 1;
-- INSERT INTO prefectures VALUES (100, 'アルゴ県', 100);

-- テーブルを結合してデータを表示
SELECT
    prefectures.name AS '都道府県名',
    regions.name AS '地方名'
FROM
    prefectures
    LEFT OUTER JOIN regions ON prefectures.region_id = regions.id;


8-6
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE users (id INTEGER NOT NULL PRIMARY KEY,name TEXT UNIQUE CHECK(LENGTH(name) BETWEEN 5 AND 15 ),age INTEGER CHECK( age >= 13));
-- データの追加
INSERT INTO
    users
VALUES
    (1, 'arara234', 38), (2, 'ir1ri_kame', 14), (3, 'oruru', 25);

-- 次のクエリを実行するとそれぞれエラーが出ることを確認してみましょう
-- (提出時にはコメントアウトしてください)
-- INSERT INTO users VALUES (4, 'aruru', 5);
-- INSERT INTO users VALUES (5, 'a', 20);
-- INSERT INTO users VALUES (6, 'very_long_user_name', 15);

-- データの表示
SELECT * FROM users;

8-7
-----------------------------------------------------------------------------------------------------------------------------------------------------------
AUTO INCREMNT
連番を振る
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE posts (id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT ,body TEXT);
-- データの追加
INSERT INTO
    posts(name, body)
VALUES
    ('アルル', 'こんにちは'),
    ('アルル', '今日は暑いですね'),
    ('イルル', 'アルルさん、こんにちは');

-- データの表示
SELECT * FROM posts;

8-8
-----------------------------------------------------------------------------------------------------------------------------------------------------------
値への初期値設定 DEFAULT
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE posts (id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT DEFAULT "名無し" ,body TEXT);
-- データの追加
INSERT INTO
    posts(body) 
VALUES
    ('こんにちは'),
    ('今日は暑いですね');
INSERT INTO
    posts(name, body)
VALUES
    ('アルル', 'こんにちは');

-- データの表示
SELECT * FROM posts;

8-9
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- 外部キーの参照整合性制約を有効にする
PRAGMA foreign_keys = ON;

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    body TEXT CHECK(LENGTH(body) BETWEEN 1 AND 140 ),
    FOREIGN KEY (user_id) REFERENCES users(id)
    );

-- ここにテーブルを作成するクエリを記述してください

-- データの追加
INSERT INTO
    posts(user_id, body)
VALUES
    (1, 'おはようございます'),
    (1, '今日は暑いですね'),
    (3, 'あ');

-- テーブルを結合してデータを表示
SELECT
    users.name AS 'ユーザ名',
    posts.body AS '投稿内容'
FROM
    users
    INNER JOIN posts
        ON posts.user_id = users.id;

8-10
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- ここにテーブルを作成するクエリを記述してください
CREATE TABLE likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    post_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (post_id) REFERENCES posts(id)
    );
-- データの追加
INSERT INTO
    likes(user_id, post_id)
VALUES
    (1, 3), (2, 1), (2, 2), (3, 2);

-- テーブルを結合してデータを表示
SELECT
    posts.id AS '投稿ID',
    posts.body AS '投稿内容',
    users.id AS 'いいねしたユーザのID',
    users.name AS 'いいねしたユーザ'
FROM
    likes
    INNER JOIN users, posts
        ON likes.user_id = users.id
        AND likes.post_id = posts.id
ORDER BY
    `投稿ID`;

